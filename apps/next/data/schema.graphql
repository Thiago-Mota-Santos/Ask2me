"""root of all queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  profiles(after: String, first: Int, before: String, last: Int): ProfileConnection!
  question(profileId: String!, after: String, first: Int, before: String, last: Int): Question
  profile: Profile
  questions(after: String, first: Int, before: String, last: Int): QuestionConnection!

  """user logged"""
  me: User
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge"""
  node: Profile

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents the user profile"""
type Profile implements Node {
  """The ID of an object"""
  id: ID!
  page: String!
  pixKey: String!
  description: String
  socialMedia: SocialMedia
  questions(after: String, first: Int, before: String, last: Int): QuestionConnection!
}

type SocialMedia {
  instagram: String!
  X: String!
  twitch: String!
  youtube: String!
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge"""
  node: Question

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a question asked"""
type Question implements Node {
  """The ID of an object"""
  id: ID!
  text: String
  answer: String
  page: String
}

"""Represents an authenticating user"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  username: String!
  email: String!
  password: String!
}

"""Root of mutations"""
type Mutation {
  userLoginMutation(input: UserLoginMutationInput!): UserLoginMutationPayload

  """Register a new user"""
  userRegisterMutation(input: UserRegisterInput!): UserRegisterPayload
  UserSignOutMutation(input: UserSignOutMutationInput!): UserSignOutMutationPayload
  profileRegisterMutation(input: ProfileRegisterMutationInput!): ProfileRegisterMutationPayload
  questionCreateMutation(input: QuestionCreateMutationInput!): QuestionCreateMutationPayload
  answerRegisterMutation(input: AnswerRegisterMutationInput!): AnswerRegisterMutationPayload

  """add a new qrcode"""
  QrCodeRegisterMutation(input: QrCodeRegisterInput!): QrCodeRegisterPayload
}

type UserLoginMutationPayload {
  token: String
  me: User

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input UserLoginMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserRegisterPayload {
  me: User
  token: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input UserRegisterInput {
  username: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserSignOutMutationPayload {
  """Default success field resolver."""
  success: String

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

input UserSignOutMutationInput {
  clientMutationId: String
}

type ProfileRegisterMutationPayload {
  profileEdge: ProfileEdge
  clientMutationId: String
}

input ProfileRegisterMutationInput {
  page: String!
  pixKey: String!
  description: String!
  socialMedia: SocialMediaInput
  clientMutationId: String
}

input SocialMediaInput {
  instagram: String!
  X: String!
  twitch: String!
  youtube: String!
}

type QuestionCreateMutationPayload {
  questionEdge: QuestionEdge
  clientMutationId: String
}

input QuestionCreateMutationInput {
  text: String!
  profileId: String!
  page: String
  clientMutationId: String
}

type AnswerRegisterMutationPayload {
  questionEdge: QuestionEdge
  clientMutationId: String
}

input AnswerRegisterMutationInput {
  answer: String!
  profileId: String!
  clientMutationId: String
}

type QrCodeRegisterPayload {
  profileEdge: QrCodeEdge
  clientMutationId: String
}

"""An edge in a connection."""
type QrCodeEdge {
  """The item at the end of the edge"""
  node: QrCode

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents the generated QRCode"""
type QrCode implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  identifier: String!
  correlationID: String!
  value: Float!
  brcode: String!
  status: String!
  image: String
}

input QrCodeRegisterInput {
  name: String!
  value: Int
  clientMutationId: String
}